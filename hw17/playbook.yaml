- name: start an instance with a public IP address, run docker container, delete instance
  hosts: localhost
  remote_user: ubuntu
  gather_facts: false
  vars:
    instance_name: "tbolbas-instance-ansible1"
    sg_name: "tbolbas-security-group"
    key: "devops"
  become: true

  tasks:
    - name: start instance
      amazon.aws.ec2_instance:
        name: "{{ instance_name }}"
        key_name: "{{ key }}"
        instance_type: t2.micro
        availability_zone: "us-east-1b"
        security_group: "{{ sg_name }}"
        network:
          assign_public_ip: true
        image_id: ami-0fc5d935ebf8bc3bc
        region: us-east-1
        wait: true
        state: running
        count: 1
        tags:
          Environment: Testing
      register: myec2

    - name: Display information
      debug:
        msg: "{{myec2}}"

          # - name: Add instance public IP to host group
          # add_host: 
          #hostname: "{{ item.public_ip_address }}" 
          #groupname: ec2host
          #with_items: "{{myec2.instances}}"   

    - name: Set fact
      set_fact:
        ec2_ip: "{{myec2.instances[0].public_ip_address}}"
    
    - name: Wait for SSH to come up
      # delegate_to: "{{ item.public_ip_address }}"
      #      delegate_to: "{{ec2_ip}}"
      local_action: wait_for
                    host={{ ec2_ip }}
                    port=22
                    state=started
                    #    with_items: "{{myec2.instances}}"

                    #- name: Set fact
                    #  set_fact:
                    #     ec2_ip: "{{myec2.instances[0].public_ip_address}}"    

  
                    #    - name: Print Public IP Address
                    #debug:
                    #msg: "Instance IP address is {{ ec2_ip }}"
  
          #hosts: ec2host  
          #gather_facts: false  
    - name: Update APT cache
      apt:
        update_cache: yes
      delegate_to: "{{ ec2_ip}}"
        #with_items: "{{myec2.instances}}"

    - name: Install Docker dependencies
      apt:
        name:
          - apt-transport-https
          - ca-certificates
          - curl
          - software-properties-common
        state: present
      delegate_to: "{{ ec2_ip}}"

    - name: Add Docker GPG key
      apt_key:
        url: https://download.docker.com/linux/ubuntu/gpg
        state: present
      delegate_to: "{{ ec2_ip}}"

    - name: Add Docker APT repository
      apt_repository:
        repo: deb https://download.docker.com/linux/ubuntu bionic stable
        state: present
      delegate_to: "{{ ec2_ip}}"

    - name: Install Docker
      apt:
        name: docker-ce
        state: present
      delegate_to: "{{ ec2_ip}}"
    
    - name: Start service docker
      service:
        name: docker
        state: started
      delegate_to: "{{ ec2_ip}}"
      
    - name: Ensure group "docker" exists
      ansible.builtin.group:
        name: docker
        state: present
      delegate_to: "{{ ec2_ip}}"

    - name: adding ubuntu user to docker group
      user:
        name: "ubuntu"
        groups: docker
        append: yes
      delegate_to: "{{ ec2_ip}}"

    - name: Running the container
      community.docker.docker_container:
        image: hello-world:latest
        name: hello-world
        state: started 
      delegate_to: "{{ ec2_ip}}"
      
    - name: Terminate instance.
      amazon.aws.ec2_instance:
        state: absent
        filters:
          ip-address: "{{ ec2_ip }}"
